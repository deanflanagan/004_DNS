

networks:
  web:  
    external: false
    ipam:
      config:
        - subnet: 10.0.0.0/24

services:
  db:
    image: postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - web 

  backend:
    build: 
      context: .
      dockerfile: .Dockerfile.backend
    command: bash -c "python manage.py migrate ; python manage.py migrate --run-syncdb; python manage.py runserver 0.0.0.0:8000"
    image: backend
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings
    networks:
      - web

  frontend:
    build: 
      context: .
      dockerfile: .Dockerfile.frontend
    image: frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - web
  
  redis:
    image: redis
    ports:
      - "6379:6379"
    depends_on:
      - frontend
      - backend
    networks:
      - web

  celery:
    build: 
      context: .
      dockerfile: .Dockerfile.backend
    command: celery -A backend worker -l info
    image: backend
    depends_on:
      - redis
      - backend
      - frontend
      - db
    networks:
      - web

  proxy:
    image: dockware/proxy:latest
    container_name: proxy
    ports:
      - "80:80"
      - "443:443"
    networks:
      web:
        ipv4_address: 10.0.0.100
    volumes:
      - "./proxy.conf:/etc/nginx/conf.d/default.conf"
    logging:
      driver: json-file
      options:
        labels: 'proxy'
        env: 'proxy'
    depends_on:
      - redis
      - backend
      - frontend  
      - db
      - celery

  dnsmasq:
    image: jpillora/dnsmasq
    ports:
      - "53:53/udp"
    networks:
      - web
    depends_on:
      - proxy
    volumes:
      - "./dnsmasq.conf:/etc/dnsmasq.conf"

volumes:
  db-data: {}
